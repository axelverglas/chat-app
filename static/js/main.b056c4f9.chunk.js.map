{"version":3,"sources":["components/LoginForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/MessageForm.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","process","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","target","placeholder","required","align","MyMessage","message","attachments","length","src","file","alt","style","float","marginRight","color","backgroundColor","text","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","MessageForm","props","setValue","chatId","creds","event","trim","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","display","files","SendOutlined","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b056c4f9.chunk.js","sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\n\nconst LoginForm= () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const authObject = { 'Project-ID': process.env.REACT_APP_PROJECT_ID, 'User-Name': username, 'User-Secret': password };\n\n    try {\n      await axios.get('https://api.chatengine.io/chats', { headers: authObject });\n\n      localStorage.setItem('username', username);\n      localStorage.setItem('password', password);\n\n      window.location.reload();\n      setError('');\n    } catch (err) {\n      setError('Oops, informations incorrect !');\n    }\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form\">\n        <h1 className=\"title\">Chat Application</h1>\n        <form onSubmit={handleSubmit}>\n          <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Nom d'utilisateur\" required />\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Mot de passe\" required />\n          <div align=\"center\">\n            <button type=\"submit\" className=\"button\">\n              <span>Connexion</span>\n            </button>\n          </div>\n        </form>\n        <h1>{error}</h1>\n      </div>\n    </div>\n\n  );\n};\n\nexport default LoginForm;","const MyMessage = ({ message }) => {\n    if(message?.attachments?.length > 0){\n        return(\n            <img\n                src={message.attachments[0].file}\n                alt=\"message-attachment\"\n                className=\"message-image\"\n                style={{ float : 'right' }}\n            />\n        )\n    }\n    return(\n        <div className=\"message\" style={{float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50'}}>\n            {message.text}\n        </div>\n    );\n}\nexport default MyMessage;","const TheirMessage = ({ lastMessage, message }) => {\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\n    return(\n        <div className=\"message-row\">\n            {isFirstMessageByUser && (\n                <div \n                    className=\"message-avatar\"\n                    style={{backgroundImage: `url(${message?.sender?.avatar})`}}\n                />\n            )}\n            {message?.attachments?.length > 0\n                    ? (\n                        <img\n                            src={message.attachments[0].file}\n                            alt=\"message-attachment\"\n                            className=\"message-image\"\n                            style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\n                        />\n                    ): (\n                        <div className=\"message\" style={{float: 'left', backgroundColor: '#CABCDC',  marginLeft: isFirstMessageByUser ? '4px' : '48px'}}>\n                            {message.text}\n                        </div>\n                    )\n            }\n        </div>\n    )\n}\nexport default TheirMessage;","import { useState } from 'react'\nimport { sendMessage, isTyping } from 'react-chat-engine';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\n\n\nconst MessageForm = (props) => {\n    const [value, setValue] = useState('');\n    const {chatId, creds} = props;\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        const text = value.trim();\n\n        if(text.length > 0 ) sendMessage(creds, chatId, {text})\n    }\n\n    const handleChange = (event) => {\n        setValue(event.target.value);\n\n        isTyping(props, chatId);\n    }\n\n    const handleUpload = (event) => {\n        sendMessage(creds, chatId, {files: event.target.value, text: ''})\n    }\n\n    return(\n        <form className=\"message-form\" onSubmit={handleSubmit}>\n            <input\n                className=\"message-input\"\n                placeholder=\"Send a message...\"\n                value={value}\n                onChange={handleChange}\n                onSubmit={handleSubmit}\n            />\n            <label htmlFor=\"upload-button\">\n                <span className='image-button'>\n                    <PictureOutlined className='picture-icon' \n                    />\n                </span>\n            </label>\n            <input\n                type=\"file\" \n                multiple={false}\n                id=\"upload-button\"\n                style={{display: 'none'}}\n                onChange={handleUpload}\n            />\n            <button type='submit' className='send-button'>\n                <SendOutlined className='send-icon'/>\n            </button>\n        </form>\n    );\n}\nexport default MessageForm;","import MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport MessageForm from './MessageForm';\n\nconst ChatFeed = (props) => {\n  const { chats, activeChat, userName, messages } = props;\n\n  const chat = chats && chats[activeChat];\n\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\n    <div\n      key={`read_${index}`}\n      className=\"read-receipt\"\n      style={{\n        float: isMyMessage ? 'right' : 'left',\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\n      }}\n    />\n  ));\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      const isMyMessage = userName === message.sender.username;\n\n      return (\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\n          <div className=\"message-block\">\n            {isMyMessage\n              ? <MyMessage message={message} />\n              : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\n          </div>\n          <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\n            {renderReadReceipts(message, isMyMessage)}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  if (!chat) return <div />;\n\n  return (\n    <div className=\"chat-feed\">\n      <div className=\"chat-title-container\">\n        <div className=\"chat-title\">{chat?.title}</div>\n        <div className=\"chat-subtitle\">\n          {chat.people.map((person) => ` ${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      <div style={{ height: '100px' }} />\n      <div className=\"message-form-container\">\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatFeed;","import { ChatEngine } from 'react-chat-engine'\nimport './App.css';\n\nimport LoginForm from './components/LoginForm';\nimport ChatFeed from './components/ChatFeed.jsx';\n\n\nconst App = () => {\n  if(!localStorage.getItem('username')) return <LoginForm />\n\n  return (\n    <ChatEngine\n      height=\"100vh\"\n      projectID={process.env.REACT_APP_PROJECT_ID}\n      userName={localStorage.getItem('username')}\n      userSecret={localStorage.getItem('password')}\n      renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\n    />\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}